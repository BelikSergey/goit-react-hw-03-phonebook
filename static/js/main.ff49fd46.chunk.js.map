{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactsList/ContactsList.jsx","components/ContactForm/ContactForm.js","components/Filter/Filter.jsx","App.js","index.js","components/ContactsList/ContactsList.module.css"],"names":["module","exports","ContactListItem","id","name","number","onRemove","className","s","listItem","buttonDelete","onClick","ContactsList","contacts","length","map","contact","ContactForm","state","handleInputChange","e","currentTarget","value","setState","handleSubmitForm","preventDefault","validateForm","props","onSubmit","nanoid","reset","onChekunike","alert","this","form","type","placeholder","onChange","pattern","buttonForm","Component","Filter","filter","target","App","newContact","handleUniceContact","isContactThere","find","handleRemoveContact","handleFilterSearch","filterContacts","toLowerCase","includes","JSON","parse","localStorage","getItem","prevProps","prevState","setItem","stringify","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff49fd46.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"buttonForm\":\"ContactForm_buttonForm__34KbY\"};","import PropTypes from \"prop-types\";\nimport s from \"./ContactsList.module.css\";\n\nfunction ContactListItem({ id, name, number, onRemove }) {\n  // console.log(name, number);\n  return (\n    <li className={s.listItem}>\n      {name} : {number}{\" \"}\n      <button className={s.buttonDelete} onClick={() => onRemove(id)}>\n        delete\n      </button>\n    </li>\n  );\n}\n\nfunction ContactsList({ contacts, onRemove }) {\n  if (contacts.length === 0) return null;\n  // console.log(contacts);\n  return (\n    <ul>\n      {/* <h3>Contacts</h3> */}\n      {contacts.map((contact) => (\n        <ContactListItem key={contact.id} {...contact} onRemove={onRemove} />\n      ))}\n    </ul>\n  );\n}\n\nContactsList.propTypes = {\n  onRemove: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\nContactListItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactsList;\n","import React, { Component } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport s from \"./ContactForm.module.css\";\n// import PropTypes from 'prop-types';\n\nexport default class ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleInputChange = (e) => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmitForm = (e) => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    // this.props.onSubmit(this.state)\n    const isValidForm = this.validateForm();\n    if (isValidForm) {\n      this.props.onSubmit({ id: nanoid(), name, number });\n    } else return;\n    this.reset();\n  };\n  validateForm = () => {\n    const { name, number } = this.state;\n    const { onChekunike } = this.props;\n    if (!name || !number) {\n      alert(\"Empty fields!!! Please fill\");\n      return false;\n    }\n    return onChekunike(name);\n  };\n  reset = () => {\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form className={s.form} onSubmit={this.handleSubmitForm}>\n        <h3>Name</h3>\n        <input\n          type=\"text\"\n          name=\"name\"\n          // id={this.nameId}\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={this.handleInputChange}\n        ></input>\n\n        <h3>Number</h3>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\n          placeholder=\"345-67-89\"\n          value={number}\n          onChange={this.handleInputChange}\n        ></input>\n        <button className={s.buttonForm} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n","const Filter = ({ filter, onChange }) => {\n  // console.log('click');\n  return (\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      placeholder=\"Search by contacts\"\n      onChange={({ target }) => onChange(target.value)}\n    />\n  );\n};\nexport default Filter;\n","import { Component } from \"react\";\nimport ContactsList from \"./components/ContactsList\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    // console.log('компонент смонтирован');\n    const contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n    // console.log(contacts);\n    this.setState({ contacts: contacts });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('компонент обновился');\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  handleSubmitForm = (newContact) => {\n    this.setState(({ contacts }) => ({\n      contacts: [...contacts, newContact],\n    }));\n  };\n\n  handleUniceContact = (name) => {\n    const { contacts } = this.state;\n    const isContactThere = contacts.find((contact) => contact.name === name);\n    if (isContactThere) {\n      alert(\"Contact is exist\");\n      return;\n    }\n    //  else {\n    //     alert('Add contact')\n    // }\n    return !isContactThere;\n  };\n  handleRemoveContact = (id) =>\n    this.setState(({ contacts }) => ({\n      contacts: contacts.filter((contact) => contact.id !== id),\n    }));\n\n  handleFilterSearch = (filter) => this.setState({ filter });\n\n  filterContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const filteredContacts = this.filterContacts();\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <ContactForm\n          onSubmit={this.handleSubmitForm}\n          onChekunike={this.handleUniceContact}\n        />\n        <h2>Contacts</h2>\n        <h3>Find contacts by name</h3>\n        <Filter filter={filter} onChange={this.handleFilterSearch} />\n        <ContactsList\n          contacts={filteredContacts}\n          onRemove={this.handleRemoveContact}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonDelete\":\"ContactsList_buttonDelete__1lMRH\",\"listItem\":\"ContactsList_listItem__ic_NQ\"};"],"sourceRoot":""}